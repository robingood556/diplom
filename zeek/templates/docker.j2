version: "2.2"

services:  
  setup:
    image: elasticsearch:8.0.0
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          {% for n in range(1, nodes+1) %}
          "  - name: es{{ n }}\n"\
          "    dns:\n"\
          "      - es{{ n }}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          {% endfor %}
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es1:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es1:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es1/es1.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - testelk

{% for n in range(1, nodes+1) %}
  es{{ n }}:
    depends_on:
    {% if n == 1 %}
      setup:
        condition: service_healthy
    {% else %}
      - es{{ n - 1}}
    {% endif %}
    image: elasticsearch:8.0.0
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata{{ n }}:/usr/share/elasticsearch/data
    {% if n == 1 %}
    ports:
      - ${ES_PORT}:9200
    {% endif %}
    environment:
      - node.name=es{{ n }}
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes={{ es_data }}
      - discovery.seed_hosts={{ es_data }}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es1/es1.key
      - xpack.security.http.ssl.certificate=certs/es1/es1.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es1/es1.key
      - xpack.security.transport.ssl.certificate=certs/es1/es1.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - testelk

{% endfor %}

  kibana:
    depends_on:
    {% for n in range(1, nodes+1) %}
      es{{ n }}:
        condition: service_healthy
    {% endfor %}
    image: kibana:8.0.0
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es1:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - testelk

  logstash:
    container_name: logs-container
    image: logstash:8.0.0
    user: "logstash:root"
    volumes:
      - certs:/usr/share/logstash/config/certs:rw
      - logstashdata:/usr/share/logstash/data
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - 5044:5044
      - 5000:5000/tcp
      - 5000:5000/udp
      - 9600:9600
    environment:
      - ELASTICSEARCH_HOSTS=https://es1:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - "LS_JAVA_OPTS=-Xmx2g -Xms2g"
    networks:
      - testelk

  filebeat:
    user: root
    container_name: filebeat-container
    build:
      context: filebeat/
    command: bash -c "filebeat -e"
    environment:
      - LOGSTACH_HOSTS=logs-container:5044
    networks:
      - testelk

volumes:
  certs:
    driver: local
  {% for n in range(1, nodes+1) %}
  esdata{{ n }}:
    driver: local
  {% endfor %}
  kibanadata:
    driver: local
  logstashdata:
    driver: local

networks:
  testelk:
    driver: bridge
